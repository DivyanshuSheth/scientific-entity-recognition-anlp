
Kai Chen, Ye Wang, Yitong Li, Aiping LiNational University of Defense Technology, Changsha, ChinaPengcheng Laboratory, Shenzhen, ChinaHuawei Technologies Co., Ltd.
Abstract
Temporal factors are tied to the growth of facts
in realistic applications, such as the progress of
diseases and the development of political situ-
ation, therefore, research on Temporal Knowl-
edge Graph (TKG) attracks much attention. In
TKG, relation patterns inherent with temporal-
ity are required to be studied for representation
learning and reasoning across temporal facts.
However, existing methods can hardly model
temporal relation patterns, nor can capture the
intrinsic connections between relations when
evolving over time, lacking of interpretability.
In this paper, we propose a novel temporal mod-
eling method which represents temporal enti-
ties as Rotations inQuaternion Vector Space
(RotateQVS) and relations as complex vectors
in Hamilton’s quaternion space. We demon-
strate our method can model key patterns of re-
lations in TKG, such as symmetry, asymmetry,
inverse, and can further capture time-evolved
relations by theory. Empirically, we show that
our method can boost the performance of link
prediction tasks over four temporal knowledge
graph benchmarks.
1 Introduction
Knowledge Graphs (KGs) have been widely
adopted to represent informative knowledge or
facts in real-world applications (Bollacker et al.,
2008; Miller, 1995; Suchanek et al., 2007). How-
ever, as known facts are usually sparse, KGs are
far from completeness. Thus, Knowledge Graph
Completion (KGC) methods are proposed to pre-
dict missing facts, i.e. links between entities (Bor-
des et al., 2013; Yang et al., 2015; Dettmers et al.,
2018; Chen et al., 2021b). Furthermore, in real
world, many facts are bonded with a particular
time by nature. For example, Barack Obama is
the president of USA is only valid for the time pe-
riod 2009 - 2017 . To model such time-sensitive
facts, Temporal Knowledge Graphs (TKGs) haverecently drawn growing attention from both aca-
demic and industrial communities (Lautenschlager
et al., 2015; Leetaru and Schrodt, 2013).
TKG Embedding (TKGE) methods (Jiang et al.,
2016; Dasgupta et al., 2018; Jin et al., 2020;
Sadeghian et al., 2021) were proposed to repre-
sent entities and relations with temporal features
in TKGs (Lautenschlager et al., 2015; Leetaru and
Schrodt, 2013). But how to present them with
temporal interpretability remains a challenge for
state-of-the-art TKGE models. Further, it is cru-
cial for TKG Completion (TKGC) to leverage the
learned temporal information. Previous static KGC
works (Sun et al., 2020; Schlichtkrull et al., 2018;
Gao et al., 2020) learn explainable embeddings of
various relation patterns, so that symmetric pattern
(e.g. “co-author”), asymmetric pattern (e.g. “affili-
ation”), inverse pattern (e.g. “buyer” vs. “seller”)
and complex composition pattern (e.g. “father’s
wife (mother)” vs. “wife’s father (father in law)”)
can be captured in static KGs. However, in TKGs,
there are inherent connections between entities and
their relations along with time-evolving. For exam-
ple, the relation between Kit Harington andRose
Leslie isin love in2012 , becomes engaged in2017 ,
and then turns into married in2018 . To the best
of our knowledge, very few of the existing TKGE
methods can capture them.
To address this problem, we take inspira-
tions from Hamilton’s quaternion number system
(Hamilton, 1844; Zhang et al., 2019a; Gao et al.,
2020) and propose a novel method based on quater-
nion. To be specific, we encode both entities and
relations as quaternion embeddings, and then tem-
poral entity embeddings can be represented as
Rotations inQuaternion Vector Space (Rotate-
QVS). Theoretically, we show the limitations of
previous methods and demonstrate that perform-
ing quaternion embeddings can model symmetric,
asymmetric, and inverse relation patterns. Mean-
while, we prove our method is capable of cap-5843turing time-evolving information in TKG expli-
cably. We empirically evaluate our method over
four TKGC benchmarks and report state-of-the-
art performance consistently. Further, we perform
analysis of the learned quaternion embeddings and
show the abilities of our RotateQVS for model-
ing various relation patterns, including temporal
evolution.
We summarize our main contributions as fol-
lows:
1.We propose an original quaternion based
TKGC method, namely RotateQVS, which
represents temporal information as rotations
in quaternion vector space.
2.We study temporal evolving relations, and
we demonstrate the proposed RotateQVS can
model various relation patterns including tem-
poral evolution both theoretically and empiri-
cally.
3.Our RotateQVS outperforms the SOTA meth-
ods over all of ICEWS14, ICEWS05-15,
YAGO11k and GDELT datasets on link pre-
diction task.
2 Preliminaries on Hamilton’s
Quaternions
Quaternion number system (Hamilton, 1844) is
an extension of traditional complex numbers. Re-
cently, quaternion has been applied in static knowl-
edge graph embedding (Zhang et al., 2019a; Gao
et al., 2020). For readers better understanding our
method in Section 3, we introduce the definition
and basic operations of quaternion in this section.
2.1 Quaternion Operations
A quaternion is expressed as q=a+bi+cj+dk,
and some key quaternion operations are defined as:
Conjugate Similar to a traditional complex num-
ber, the conjugate of a quaternion is defined with
the same real part and the opposite imaginary parts,
that is
q=a−bi−cj−dk.
Inner Product The inner product between q=
a+bi+cj+dkandq=a+bi+cj+dk
is the sum of product of each corresponding factor
q·q=⟨a, a⟩+⟨b, b⟩+⟨c, c⟩+⟨d, d⟩.Norm With the definition of conjugate and inner
product, the norm of a quaternion is defined as:
||q||=p
q·q=p
q·q=p
a+b+c+d
(1)
Inverse The inverse of a quaternion is defined
from q·q=q·q= 1. Multiplying by q, we
haveq·q·q=q, derived from which we get:
q=q
||q||(2)
Hamilton Product For two quaternions qand
q, their product is determined by the products of
the basis elements and the distributive law. The
quaternion multiplication formula is:
qq= (aa−bb−cc−dd)
+ (ab+ba+cd−dc)i
+ (ac−bd+ca+db)j
+ (ad+bc−cb+da)k(3)
Considering the conjugate of Hamilton product,
we can further deduce:
qq=qq,
qqq=qqq. (4)
2.2 3D Vector Space
In fact, the imaginary part bi+cj+dkof a quater-
nion behaves like a vector v= (b, c, d )in a 3D
vector space. Thus, conveniently, we rewrite a
quaternion using imaginary vector s:
q=a+bi+cj+dk=a+v= (a,0)+(0,v).(5)
Multiplication rule The multiplication of two
imaginary vectors vandvis
vv=v×v−v·v, (6)
where v×vis vector cross product, resulting
in a vector, and v·vis the dot product, which
gives a scalar. Obviously, the multiplication of two
imaginary vectors is non-commutative, as the cross
product is non-commutative.
Thus, the multiplication of two quaternions can
be rewritten in 3D vector perspective:
qq= (a,v) (a,v)
=(aa−v·v, av+av+v×v)(7)58443 Proposed Method
In this section, we introduce a novel temporal mod-
eling approach for TKG by representing temporal
information as Rotations inQuaternion Vector
Space (RotateQVS).
3.1 Notations
Suppose that we have a temporal knowledge graph,
noted as G. We use Eto denote the set of entities,
Rto denote the set of relations, and Tto denote the
set of time stamps. Then, the temporal knowledge
graphGcan be defined as a collection of quadru-
ples, noted as (s, r, o, t ), where a relation r∈ R
holds between a head entity s∈ Eand an tail entity
o∈ Eat time t. The actual time tis represented by
a time stamp τ∈ T.
3.2 Representing Temporal Information using
Rotations in 3D Vector Space
Similar to Tero (Xu et al., 2020a) which utilizes a
rotation in complex space, we also represent tempo-
ral information using rotations while in the quater-
nion vector space.
In 3D vector space, according to Euler’s rotation
theorem (Euler, 1776; Verhoeff, 2014), any rota-
tion or sequence of rotations of a rigid body or a
coordinate system about a fixed point is equivalent
to a single rotation by a given angle θabout a fixed
axis (called the Euler axis) that runs through the
fixed point. And an extension of Euler’s formula
for quaternion can be expressed as follows:
q=e
= cosθ
2+ (vi+vj+uk) sinθ
2,(8)
where i,j,kare unit vectors representing the three
Cartesian axes.
3.2.1 Representing Time, Entities, and
Relations:
Quaternions provide us with a simple way to en-
code this axis–angle representation in four num-
bers, and can be used to perform the rotation proce-
dure in 3D vector space. By doing so, we constrain
thetime stamp embedding τττas a unit quaternion
as
τττ= cosθ
2+usinθ
2, (9)
where uis a unit vector in the quaternion space.
And for other elements of a quadruple (s, r, o, t ),
based on the Hamilton’s quaternions in Section 2,
we map each of them to its base, which is a time-
independent quaternion embedding:
s={a+bi+cj+dk}
r={a+bi+cj+dk}
o={a+bi+cj+dk}, (10)
where a,b,c,d∈R.
3.2.2 Temporal Entities:
We make use of the quaternion rules to represent
temporal information as rotations in 3D vector
space. An abstract rotation procedure is illustrated
in Figure 1.
Theorem 1. Given a unit quaternion q= cos+
usin, where u∈Ri+Rj+Rkis a unit vector
(rotation axis) in a three-dimensional space, the
result of vector vrotating θaround the rotation
axisuis
v=qvq=qvq . (11)
Theorem 1 is supported by Rodrigues’ rotation
formula (Rodrigues, 1840).We then define the
functional mapping that reflects the temporal evolu-
tion of an entity embedding. For each time stamp τ,
the functional mapping is an element-wise rotation
from the basic entity embedding e(quaternion rep-
resentation) to the time-specific entity embedding
e, which is as follows:
e=τττeτττ=τττ(a+v)τττ
=aττττττ+τττvτττ
=a+τττvτττ, (12)
where aandvare the scalar/real and vec-
tor/imaginary part of the entity quaternion represen-
tation erespectively. And according to Theorem 1,
τττvτττis the result of vector vrotating θaround
the rotation axis u(τττ= cos+usin, see5845Equation 9) which constitutes the vector/imaginary
part of e. Thus, we can get a lemma:
Lemma 1. The vector (imaginary) part is rotated
while the scalar (real) part remains unchanged in
the functional mapping (Equation 12) which re-
flects the temporal evolution of an entity embed-
ding.
For a quadruple (s, r, o, t ), we make use of the
functional mapping to get the time-specific entity
embeddings sandofrom the basic entity embed-
dings sando:
s=τττsτττ,o=τττoτττ. (13)
Considering the temporal evolution of entity em-
bedding, the relation embedding ris regarded as
a translation from the time-specific subject embed-
dingsto the conjugate of the time-specific object
embedding o. In other words, we aim to make
s+r=ofor all positive quadruples. Then, the
score function can be defined as:
f(s, r, o, t ) =||s+r−o||. (14)
Note that each embedding above is a quaternion
representation, and “ ||” denotes the norm computa-
tion (see Equation 1).
3.2.3 Loss Function
We use the same margin loss function with multiple
negative sampling as proposed in (Sun et al., 2019),
which has been proved to be effective on distance-
based KGE models (Bordes et al., 2013; Sun et al.,
2019) and as well as the TKGE models (Xu et al.,
2019, 2020a). In details, our loss function is
L=−logσ(γ−f(ξ))−Xlogσ(f(ξ)−γ),
(15)
where ηis the number of negative training sam-
ples over the positive one, ξis the positive training
quadruple, σ(·)denotes the sigmoid function, γis
a fixed margin, and ξdenotes the i-th negative sam-
ple generated by randomly corrupting the subject
or the object of ξsuch as (s, r, o, t )and(s, r, o, t).
3.3 Modeling Various Relation Patterns
In this section, we demonstrate that our RotateQVS
can model various relation patterns. In TKGE, four
kinds of relation patterns are mostly considered and
studied in previous static KGE and TKGE works
(Sun et al., 2019; Gao et al., 2020). Their defini-
tions are given as follows:Definition 1. A relation ris symmetric, if ∀s, o, t ,
r(s, o, t )∧r(o, s, t )holds True.
Definition 2. A relation ris asymmetric, if ∀s, o, t ,
r(s, o, t )∧ ¬r(o, s, t )holds True.
Definition 3. Relation ris the inverse of r, if
∀s, o, t ,r(s, o, t )∧r(o, s, t )holds True.
Definition 4. Relation randrare evolving over
time from t(time stamp τ) tot(time stamp τ),
if∀s, o,r(s, o, t)∧r(s, o, t)holds True.
Comparing with other TKGE methods, we show
RotateQVS can model all these four patterns, while
previous methods (see Section 4.3) fail to do so.
One advantage of applying quaternion embeddings
is that our method supports all these relation pat-
terns, while other representation forms cannot, such
as TeRo (Xu et al., 2020a) using complex number
system a+bi.
As seen in our score function (Equation 14), our
aim is to make
τττsτττ+r=τττoτττ=τττoτττ
⇔o−s=τττrτττ .(16)
Then we can get following results:
Lemma 2. RotateQVS can model the symmetric
pattern for TKG. (See proof in Appendix B)
Lemma 3. RotateQVS can model the asymmetric
pattern for TKG. (See proof in Appendix C)
Lemma 4. RotateQVS can model the inversion
pattern for TKG. (See proof in Appendix D)
Lemma 5. RotateQVS can model the temporal-
evolution pattern for TKG.
Proof. For temporal-evolution pattern, r(s, o, t)
∧r(s, o, t)in Definition 4 can be expressed as:
(
o−s=τττrτττ
o−s=τττrτττ
⇔ττττττr(ττττττ)=r.(17)
For the same head entity and tail entity, if a relation
rholds at time t(time stamp τ) and a relation r
holds at time t(time stamp τ), we are supposed
to get ττττττr(ττττττ)=r.
In addition, based on Equation 17, we have
τττrτττ=τττrτττ. (18)5846
Since we have Theorem 1, τττrτττandτττrτττ
can be regarded as rotations in quaternion vector
space for randr, respectively, which indicates
the norm of ris the same as that of r. Further-
more, Lemma 1 indicates the rotation mapping
keeps the scalar/real part unchanged for a vector.
Thus, we can have the following deductions:
(
||r||=||r||
Re(r) =Re(r).(19)
Notice that Equation 19 is a sufficient and un-
necessary conclusion of Equation 18.
3.4 Theoretical Comparison Against TeRo
TeRo (Xu et al., 2020a) is the main baseline for
our model. The rotated head entity embedding and
tail entity embedding of TeRo in complex number
system are s◦τττ, ando◦τττrespectively, where ◦
denotes Hermitian dot product. The translational
score function of TeRo f(s, r, o, t ) =||s+r−o||
is to make
s◦τττ+r=o◦τττ=τττ◦o=o◦τττ . (20)
And we further prove that TeRo can not model
relations with temporal evolution by means of re-
duction to absurdity.
To this end, taking advantages of quaternion
representation, our RotateQVS can deduce further
derivation:
τττsτττ+r=τττoτττ=τττoτττ
⇔o−s=τττrτττ ,(21)
where time stamp embeddings and relation em-
beddings can be particularly extracted to analyse
the influence of temporal evolution on relations,
since our derivation result is independent with en-
tity embeddings. Above all, we demonstrate that
our RotateQVS can model relations with temporal
evolution while TeRo cannot.
3.5 Complexity Comparison
Table 1 summarizes the space complexities of sev-
eral baselines and our model. n,n,nand
n denote numbers of entities, relations, time
stamps, and temporal tokens used in (García-Durán
et al., 2018); and dis the dimension of embed-
dings. The space complexity of our RotateQVS is
O(nd+nd+nd), the same as TTransE (Leblay
and Chekol, 2018), HyTE (Dasgupta et al., 2018)
and TeRo (Xu et al., 2020a).
4 Experiments
4.1 Benchmark Datasets
To evaluate our proposed Quaternion embeddings,
we perform link prediction task on four com-
monly used TKG benchmark datasets, namely
ICEWS14, ICEWS05-15 (García-Durán et al.,
2018), YAGO11k (Dasgupta et al., 2018) and
GDELT (Trivedi et al., 2017).Table 2 summarises
the details of the four datasets, where it is easy to
find ICEWS14 and ICEWS05-15 have more quan-
titative relations than the other two datasets.
ICEWS (Lautenschlager et al., 2015) is a repos-
itory containing political events with a specific
timestamp. ICEWS14 and ICEWS05-15 (García-
Durán et al., 2018) are two subsets of ICWES cor-
responding to facts in 2014 and facts between 2005
and 2015.
YAGO11k (Dasgupta et al., 2018) is a subset of
YAGO3 (Mahdisoltani et al., 2015), where time an-
notations are represented as time intervals. We de-
rive the dataset from HyTE (Dasgupta et al., 2018)5847to obtain the same year-level granularity by drop-
ping the month and date information, which results
in 70 different time stamps.
For GDELT, we use the subset extracted by
Trivedi et al., consisting of the facts from April
1, 2015 to March 31, 2016. We take the same
pretreatment of the train, validation and test sets
as (Goel et al., 2020), to make the problem into a
TKGC rather than an extrapolation problem.
4.2 Evaluation Protocol
Link prediction task that aims to infer incomplete
time-wise fact with a missing entity ( (s, r,?, t)
or(?, r, o, t )) is adopted to evaluate the proposed
model. During the inference, we follow the same
procedure of Xu et al. to generate candidates.
For a test sample (s, r, o, t ), we first generate can-
didate quadruples set C={(s, r,o, t) :o∈
E} ∪ { (s, r, o, t ) :s∈ E} by replacing sorowith
all possible entities, and then rank all the quadru-
ples by their scores (Equation 14) under the time-
wise filtered settings (Xu et al., 2019; Goel et al.,
2020).
The performance is reported on the standard eval-
uation metrics: the proportion of correct triples
ranked in top 1, 3 and 10 (Hits@1, Hits@3, and
Hits@10), and Mean Reciprocal Rank (MRR). All
the metrics (Hits@1, Hits@3, Hits@10 and MRR)
are the higher the better. For all experiments, we
report averaged results across 5 runs, and we omit
the variance as it is generally low.
4.3 Baselines
We compare with both sota static and temporal
KGE baselines. For static baselines, we use TransE
(Bordes et al., 2013), DistMult (Yang et al., 2015),
RotatE (Sun et al., 2019), and QuatE (Zhang et al.,
2019a). For TKGE methods, we consider TTransE
(Leblay and Chekol, 2018), HyTE (Dasgupta et al.,
2018), TA-DistMult (García-Durán et al., 2018),
DE-SimplE (Goel et al., 2020), ATiSE (Xu et al.,
2019), and TeRo (Xu et al., 2020a).
Note that TeRo (Xu et al., 2020a) is also based on
the idea of rotations, and thus we consider TeRo as
a directly baseline. Because our quaternion repre-
sentation ( a+bi+cj+dk) doubles the embedding
parameters of TeRo which uses complex represen-
tation ( a+bi), we further adopt two models for
fair comparisons: (i) TeRo-Large: TeRo using dou-ble embedding dimension;(ii) RotateQVS-Small:
The proposed RotateQVS with half embedding di-
mension. By doing so, their parameter complexi-
ties can be comparable with TeRo’s.
4.4 Results
The experimental results over four TKG datasets
are shown in Table 3.Overall, TKGE methods
are better than static KGE methods, which shows
the effectiveness of modeling temporal informa-
tion. For the proposed RotateQVS, we observe
that our model outperforms all the baseline mod-
els over the four datasets across all metrics con-
sistently.To demonstrate the superiority of the
proposed quaternion method, we compare our Ro-
tateQVS with the direct baseline TeRo (Xu et al.,
2020a). For fair comparisons of model sizes, we ob-
serve that our RotateQVS outperforms TeRo-Large
and RotateQVS-Small outperforms TeRo. This
shows our methods with quaternion embeddings
makes great improvements, demonstrating our ad-
vantages. Specially, we see that our RotateQVS
achieves more improvements on ICEWS14 and
ICEWS05-15 datasets. We believe this is because
these two datasets have much more quantitative
relations (see Table 2) and it is also evident our
method behaves better on datasets with complex
relation patterns.
4.5 Analysis and Case Study
To further demonstrate the learned quaternion em-
beddings and the ability of our model, we perform
case studies on multiple relation patterns, through
visualization and quantitative analysis on intuitive
examples from ICEWS14.
4.5.1 Symmetric/Asymmetric/Inversion
Patterns
Since symmetric, asymmetric and inversion pat-
terns have been discussed in previous work (Sun
et al., 2019; Xu et al., 2020a), we present the case
studies of them to Appendix J.
4.5.2 Temporal-evolution Pattern
As shown in Lemma 5, if a relation rand a relation
rare evolving over time from t(time stamp τ)5848
tot(time stamp τ), we have
ττττττr(ττττττ)=r. (22)
To analyse the temporal-evolution pattern, we
focus on the relations between the same head and
tail entities with different time stamps. For exam-
ple, from ICEWS14, we observe a base fact (South
Korea, Engage in negotiation, North Korea, 2014-
02-12) and a temporal-evolution fact (South Korea,
Sign formal agreement, North Korea, 2014-02-15) ,
where Sign formal agreement is considered as the
consequence of Engage in negotiation . Thus, in our
model, the embeddings of Sign formal agreement
at time stamp 2014-02-15 and of Engage in negoti-
ation at2014-02-12 should satisfy Equation 22.
To illustrate this pattern, we measure the ma-
trix cosine similarity between r(base) and
ττττττr(ττττττ)(temporal-evolved). For each
true fact, we sample a random negative relation
and show their similarity difference. Figure 2 illus-
trates the density histogram of similarities with ran-
dom 250 fact quadruples at different time stamps
between South Korea andNorth Korea . We ob-
serve that the distributions of positive examples
and negative examples are distinct, which explains5849
our RotateQVS can model temporal-evolution pat-
terns more effectively. Comparing with TeRo (Xu
et al., 2020a), which is the main baseline for our
model, we show TeRo cannot model this pattern
theoretically (see Section 3.4).
In addition, Figure 3 shows our quaternion rep-
resentation do well in reflecting Equation 19, the
sufficient and unnecessary deductions of theoretical
analysis for temporal-evolution pattern.
More examples of temporal-evolution pattern
are shown in Table 4, where we use the relation
in base fact and time information to get a gen-
erated embedding ττττττr(ττττττ), and also
sample a random negative relation for each exam-
ple. We compute the matrix cosine similarity be-
tween ττττττr(ττττττ)andr, and also com-
pute the similarity between ττττττr(ττττττ)
and the embedding of another relation in the nega-
tive sample. Time stamps in negatives are taken as
same as the true facts. The comparison between the
two sets of results can once again prove the ability
of our model in modeling this pattern.
4.6 Convergence Analysis
For convergence analysis, we consider two fair
comparisons, where the compared two methods
have the same number of parameters:Rotate-
QVS (blue solid line) vs. TeRo-Large (yellow solid
line) and RotateQVS-Small (green dotted line) vs.
TeRo (red dotted line) in Figure 4. We observe that
RotateQVS and TeRo-Large converge at approxi-
mately the same rate, and so do RotateQVS-Small
and TeRo. We can conclude that our proposed Ro-
tateQVS can achieve better results in comparisons
of both large and small levels without sacrificing
additional training efforts.
5 Related work
Models working on Static Knowledge graph have
been well studied (Zhang et al., 2019b; Xu et al.,
2020b; Mao et al., 2020; Chen et al., 2021a) with
semantic and structure information. Translation
based methods, e.g. TransE (Bordes et al., 2013)
and TransR (Lin et al., 2015), formalise the fac-
tual distance between a head entity sand a tail
entity owith the translation carried out by the re-
lation. Adopting tensor factorization with a bi-
linear transformation, semantic matching models,
e.g. RESCAL (Nickel and Tresp, 2013) and Dist-
Mult (Yang et al., 2015), capture the semantic rel-
evance of entities. Recently, more attention were
paid to study various relation patterns. RotatE (Sun
et al., 2019) treat each relation as a rotation so
that symmetric/asymmetric, inversion and compo-
sition patterns can be inferred to predict missing
links. Further, quaternion number system (Hamil-5850ton, 1844) is applied to model more complex com-
position patterns in 3D space, such as Rotate3D
(Gao et al., 2020) and QuatE (Zhang et al., 2019a).
Many aforementioned methods (Dasgupta et al.,
2018; Leblay and Chekol, 2018; Trivedi et al.,
2017; García-Durán et al., 2018; Goel et al., 2020;
Sadeghian et al., 2021) are extended from static
Static KGs to TKGs. They integrate time informa-
tion into previous static methods as independent
features. Others study the dynamic evolution of
TKG. ATiSE (Xu et al., 2019) regards the temporal
evolution of entity and relation embeddings as com-
binations of trend component, seasonal component
and random component. CyGNet (Zhu et al., 2021)
proposes a time-aware copy-generation mechanism
leveraging known facts in the past to predict un-
known facts in the future. TeRo (Xu et al., 2020a)
defines the temporal evolution of entity embedding
as a rotation in the complex vector space. Inspired
by TeRo, our RotateQVS further represents tempo-
ral entities as rotations in quaternion vector space
and obtains more advantages.
Modeling various temporal relation patterns
(Goel et al., 2020; Xu et al., 2020a), especially the
temporal-evolution patterns, is crucial for TKGE
and the following TKGC. Zhang et al. mentions
the time-evolution property, but does not make a
systematic research on it. It remains an open re-
search question with few researches. Our work
(RotateQVS) takes inspirations from the idea of ro-
tation and generalises it into the quaternion number
system to model the complex temporal-evolution
pattern that TeRo can hardly do.
6 Conclusion
In this paper, we introduce a novel TKGC method
RotateQVS which represents temporal information
of TKGs as rotations in quaternion vector space.
Targeting temporal interpretability, we theoretically
analyse that RotateQVS can model various relation
patterns and demonstrate it with extensive exper-
iments. Compared to previous methods, Rotate-
QVS has made significant improvements on link
prediction tasks over four benchmark datasets. Fur-
thermore, we show our RotateQVS has great ad-
vantages in modeling various relation patterns with
temporal evolution.Acknowledgements
This work is supported by the Key R&D Program
of Guangdong Province (No.2019B010136003),
the National Natural Science Foundation of China
(No. 61732004, 61732022).
References585158525853A Proof of Theorem 1
Proof. Based on Equation 2, for a unit quaternion
q, it follows that q=q. Unfolding the Equation
11, we can get
v= (cosθ
2+usinθ
2)v(cosθ
2−usinθ
2)
=vcosθ
2+ (uv−vu) sinθ
2cosθ
2
−uvusinθ
2. (23)
Bearing in mind that uv=u×v−u·v(based
on the Equation 6), further we can get
v=vcosθ
2+ 2(u×v) sinθ
2cosθ
2
−((u×v)−(u·v))usinθ
2
=v(cosθ
2−sinθ
2) + (u×v)(2 sinθ
2cosθ
2)
+u(u·v)(2 sinθ
2). (24)
Using trigonometric identities, we can get
v=vcosθ+ (u×v) sinθ
+u(u·v)(1−cosθ)
= (v−u(u·v)) cos θ+ (u×v) sinθ
+u(u·v)
=vcosθ+ (u×v) sinθ+v (25)
where v=v−u(u·v)andv=u(u·v)are the
components of v(perpendicular and parallel to the
axisurespectively). Our Equation 25 satisfies the
Rodrigues’ rotation formula (Rodrigues, 1840) in
3D vector space (illustrated in Figure 5). Therefore,
the Equation 11 is proven to be a rotation in 3D
vector space.
B Proof of Lemma 2
Proof. For symmetric pattern, considering our ro-
tation based temporal representation, we express
ther(s, o, t )∧r(o, s, t )in Definition 1 as:
(
o−s=τττrτττ
s−o=τττrτττ⇔r+r= 0⇔Re(r) = 0 ,
(26)
where Redenotes the real part of a quaternion
representation.
C Proof of Lemma 3
Proof. For asymmetric pattern, r(s, o, t )∧
¬r(o, s, t )in Definition 2 can be expressed as:
(
o−s=τττrτττ
s−o̸=τττrτττ⇔r+r̸= 0⇔Re(r)̸= 0.
(27)
D Proof of Lemma 4
Proof. For inversion pattern, r(s, o, t )∧r(o, s, t )
in Definition 3 can be expressed as:
(
o−s=τττrτττ
s−o=τττrτττ
⇔r+r= 0 ⇔(
Re(r) +Re(r) =0
Im(r)−Im(r) =0,
(28)
where Imdenotes the imaginary part of a quater-
nion representation.
E Statistics of several previous TKGE
methods modeling on various relation
patterns
Table 5 shows the statistics of several previous
TKGE methods modeling on various relation pat-
terns, containing symmetry, asymmetry, inversion
and temporal-evolution.
F Proof by Contradiction for TeRo
Proof. Supposing TeRo (Xu et al., 2020a) can
model the temporal-evolution relation pattern (de-
fined in Definition 4), then relations with temporal-5854
evolution pattern will satisfy the Equation 20. No-
tice that our relation patterns defined are uncon-
cerned with some specific entities, but focusing on
the general rules among relations inside the univer-
sal entities.
If relation randrare evolving over time
from ttot, considering the same head entity
sand two different tail entities oandowhich sat-
isfyr(s, o, t)∧r(s, o, t)andr(s, o, t)∧
r(s, o, t), we can get
where we can find the derivations depend on entity
embeddings. And we can further derive that
where two different tail entities oandohave the
exactly same embeddings in TeRo. Obviously, it
is not in line with our common sense and has a
big problem in modelling the temporal-evolution
relation pattern.
G Hyperparameter
To seek and find proper hyperparameters, we uti-
lize a grid search empirically over the following
ranges for all three datasets: embedding dimen-
sion in {100,200,300,400,500}, learning rate
in{1,0.5,0.3,0.1,0.05,0.03,0.02,0.01}, the ra-
tio of negative over positive training sample in
{1,3,5,10}, the margin used in loss function in
{1,2,3,5,10,20,···,120}, the time granularity
parameter in {1,2}, and the optimizer we use is
Adagrad.
And we have found out the best hyperparameters
combination as follows: for ICEWS14, we set the
margin as 110, the time granularity parameter as
1; for ICEWS05-15, we set the margin as 120, the
time granularity parameter as 2; for YAGO11k, we
set the margin as 50, the time granularity parameter
as 100; for GDELT, we set the margin as 110, the
time granularity parameter as 1; and for all the
datasets, we choose the learning rate as 0.1, the
embedding dimension as 500, the ratio of negative
over positive training sample as 10.
H Time Granularity Analysis
As shown in Figure 6, we take time granularity anal-
ysis on ICEWS14 dataset. It find that the results of
smaller granularities are better than that of larger
granularities, as larger-granularity setups fuzz the
time information. Smaller granularity means more
time stamps to compute, while we believe in cur-
rent dataset the number of time-stamps are rela-
tively small compared with the numbers of rela-
tions and entities, and thus we suggest small time
granularity in TKG tasks.
I Size of Embedding Dimension
As shown in Figure 7, we take embedding dimen-
sion analysis on ICEWS14 dataset. We can find out
that the values of all the four metrics increase as
the dimension increases from 100 to 500, while the
improvement gains decrease when approaching the
size of 500. This indicates that larger embedding
size are recommended, while larger embeddings
can drag time efficiency and requires more com-
putational resources, thus it is a time-efficiency
trade-off.
J Analysis and Case Study for
Symmetric/Asymmetric/Inversion
Pattern
J.1 Symmetric Pattern
As shown in Lemma 2 and its proof (see Ap-
pendix B), if ris a symmetric relation, we have
r+r=0⇔Re(r) =0. That is if ris a symmet-
ric relation, the real part of quaternion representa-5855
tion of ris close to zero. To empirically study the
learned quaternion embedding of r, we illustrate
the real parts of quaternion embeddings in Fig-
ure 8 for two symmetric relations, Consult andEn-
gage in negotiation . For Consult , we have (France,
Consult, Canada, 2014-10-23) and(Canada, Con-
sult, France, 2014-10-23) . For Engage in negotia-
tion, we have (Victor Ponta, Engage in negotiation,
Klaus Johannis, 2014-11-11) and(Klaus Johannis,
Engage in negotiation, Victor Ponta, 2014-11-11) .
These suggest that the relation Consult and the re-
lation Engage in negotiation are two symmetric
relations. We observe that the learned quaternion
embeddings in Figure 8 are close to 0, which con-
firms the ability of our model.
J.2 Asymmetric Pattern
Opposite to symmetric pattern, if ris an asymmet-
ric relation, we have Re(r)̸=0. Intuitively, if ris
an asymmetric relation, the real part of quaternion
representation of ris supposed to be far away from
zero. Since we have (Nabih Berri, Threaten to halt
mediation, Israeli Defense Forces, 2014-05-12) and
(Islamic Preacher (Iran), Demand policy change,
Iran, 2014-03-02) , the two relations Threaten to
halt mediation andEngage in negotiation are taken
as two asymmetric relations. Figure 9 illustrates
the real parts of quaternion representation of them.
These observations from Figure 8 and Figure 9
show that our RotateQVS can effectively model
the symmetry and asymmetry patterns and can dis-
tinguish them.
J.3 Inversion Pattern
Lemma 4 and its proof (see Appendix D) show
that if the relation ris the inverse of the re-
lation r, we have Re(r) +Re(r) =0and
Im(r)−Im(r) =0. From two existing facts
(Romania, Host a visit, Evangelos Venizelos, 2014-
02-20) and(Evangelos Venizelos, Make a visit, Ro-
mania, 2014-02-20) in ICEWS14, we can find out
the relation Host a visit is the inverse of the rela-
tionMake a visit , which satisfies the Definition 4.
Figure 10 shows the quaternion representation as in5856Equation 28 for the inverse relation pair, contain-
ing the real part and the imaginary part (3D), where
i,jandkdenote three directions of the imaginary
parts. This demonstrates our method has effective
modeling for inverse relations.5857