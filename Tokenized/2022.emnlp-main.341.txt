  Zequn Liu , Kefei Duan , Junwei Yang , Hanwen Xu , Ming Zhang , Sheng WangSchool of Computer Science , Peking University , Beijing , ChinaSchool of EECS , Peking University , Beijing , ChinaPaul G. Allen School of Computer Science and Engineering , University of Washington , Seattle , WA   zequnliu,dkf4116,yjwtheonly,mzhang_cs@pku.edu.cn   xuhw,swang@cs.washington.edu   Abstract   Heterogeneous Information Network ( HIN ) is   essential to study complicated networks con-   taining multiple edge types and node types .   Meta - path , a sequence of node types and edge   types , is the core technique to embed HINs .   Since manually curating meta - paths is time-   consuming , there is a pressing need to develop   automated meta - path generation approaches .   Existing meta - path generation approaches can-   not fully exploit the rich textual information in   HINs , such as node names and edge type names .   To address this problem , we propose MetaFill ,   a text - infilling - based approach for meta - path   generation . The key idea of MetaFill is to for-   mulate meta - path identification problem as a   word sequence infilling problem , which can   be advanced by Pretrained Language Models   ( PLMs ) . We observed the superior performance   of MetaFill against existing meta - path gen-   eration methods and graph embedding meth-   ods that do not leverage meta - paths in both   link prediction and node classification on two   real - world HIN datasets . We further demon-   strated how MetaFill can accurately classify   edges in the zero - shot setting , where existing   approaches can not generate any meta - paths .   MetaFill exploits PLMs to generate meta - paths   for graph embedding , opening up new avenues   for language model applications in graph anal-   ysis .   1 Introduction   Heterogeneous Information Network ( HIN ) is an   effective framework to model complicated real-   world network data ( Sun et al . , 2011 ; Wang et al . ,   2019 ; Dong et al . , 2017 ; Shi et al . , 2016 ; Yang   et al . , 2020 ; Fu et al . , 2017 ; Yun et al . , 2019 ; Hu   et al . , 2020 ) . In contrast to a conventional net-   work ( Tang et al . , 2015 ; Grover and Leskovec ,   2016 ; Perozzi et al . , 2014 ; Hamilton et al . , 2017;Kipf and Welling , 2016 ; Veli ˇckovi ´ c et al . , 2018 ) ,   HIN supports multiple node types and edge types ,   thus facilitating the integrative analysis of multi-   ple datasets ( Chen et al . , 2012 ; Himmelstein and   Baranzini , 2015 ; Zhao et al . , 2020 ) . One of the   most important applications on HIN is to discover   interactions between different node types by fram-   ing it as a link prediction problem ( Fu et al . , 2020 ;   Zhang et al . , 2014 ; Cao et al . , 2017 ) . Link predic-   tion is particularly challenging on heterogeneous   and long - distance node pairs , which often do not   share any neighbors , thus presenting substantial   false - negative predictions by conventional network-   based approaches ( Shi et al . , 2014 ; Fu et al . , 2016 ;   Daud et al . , 2020 ) .   HIN exploits meta - paths to address link pre-   diction , especially for heterogeneous and long-   distance node pairs . A meta - path is a sequence of   node types and edge types . A good meta - path often   consists of paths that frequently appear in a HIN ,   thus guiding the HIN to focus on these important   paths in a large network . Since manually curating   meta - paths requires domain expertise , automated   meta - path generation approaches have become es-   sential for link prediction on HINs ( Yang et al . ,   2018 ; Wan et al . , 2020 ; Shi and Weninger , 2014a ;   Meng et al . , 2015 ; Wang et al . , 2018 ; Deng et al . ,   2021 ; Wei et al . , 2018 ; Zhong et al . , 2020 ; Ning   et al . , 2021 ) . Despite their sophisticated design to   leverage the network topological features , existing   approaches largely overlook the rich textual infor-   mation on nodes and edges . In fact , real - world   HINs contain rich textual information ( Yang et al . ,   2022 ; Liu et al . , 2022 ; Xu and Wang , 2022 ) , such   as node name , node type name and edge type name ,   which are often the key evidence for human experts   to curate meta - paths .   In this paper , we propose to identify meta - paths   using pretrained language models ( PLMs ) ( Ken-   ton and Toutanova , 2019 ; Radford et al . , 2019 ; Liu   et al . , 2019 ; Beltagy et al . , 2019 ; Gu et al . , 2020 ) in5110order to explicitly utilize the rich textual informa-   tion in HINs . The key idea of our method MetaFill   is to form the meta - path identification problem as   a text infilling problem ( Zhu et al . , 2019 ) . In effect ,   this converts a graph - based approach to an NLP   problem , enabling us to enjoy a variety of new   techniques developed along with PLMs . Specifi-   cally , MetaFill samples many paths from the HIN   according to the PLM - based probability for a word   sequence consisting of node names and edge type   names on that path , then aggregates these paths   into meta - paths by a novel context - aware node type   classifier .   We evaluated our method on two large - scale   HINs and observed substantial improvement on   link predictions compared to existing meta - path   generation approaches under two meta - path - based   link prediction frameworks . Furthermore , we   found that the improvement of our method is larger   with the decreasing of training data size , indicating   the ability of compensating data sparsity using tex-   tual information . In addition to link prediction , our   method also achieved prominent results on node   classification . Collectively , we demonstrate how   language model can be used to accurately gener-   ate meta - paths on HINs , opening up new venues   for heterogeneous graph analysis using language   models .   2 Preliminaries   Heterogeneous information network ( HIN ) is a net-   work that contains multiple node types and edge   types ( Shi et al . , 2016 ; Yang et al . , 2020 ) . Let   G= ( V , E)be a HIN , where V={v}is the set of   nodes and E={e } ⊆ V × V is the set of edges .   Each node v∈ V is associated with a node type   a∈ A. Each edge e∈ Eis associated with an edge   typer∈ R.   There are three kinds of textual information in   most HINs . 1 ) Node name : the textual description   of a node v(e.g . , breast cancer ) . 2 ) Node type   name : the textual description of a node type a   ( e.g. , disease ) . 3 ) Edge type name : the textual   description of an edge type r(e.g . , treated by ) .   Some HINs might also have edge names . While we   do not consider edge names in this paper , they can   be easily incorporated into our framework . Most   of the conventional HIN embedding approaches do   not fully exploit this rich textual information . We   aim to use language models to incorporate textual   information into HIN modeling .   Meta - path is one of the most effective techniques   for embedding HINs through explicitly modeling   heterogeneous and long - distance semantic similar-   ity ( Dong et al . , 2017 ; Wang et al . , 2019 ; Fu et al . ,   2020 ) . An l−hop meta - path Ωis defined as a se-   quence a− →a− → · · · − →a , where ais   a node type and ris an edge type . Each meta-   path could have many path instances on a HIN . Let   P = v− →v− → · · · − →v . Then Pis a path   instance of Ω , ifais the node type of vandr   is the edge type of e. HIN embedding is often   performed through repeatedly sampling a path in   the graph and then optimizing the embedding of   each node along this path . Meta - paths could be   used to record prior knowledge and then encourage   the sampling process to focus on the path that is an   instance of curated meta - paths .   3 Hypothesis Validation   Our hypothesis is that PLMs can be used to identify   important meta - paths based on the textual informa-   tion along each path . Since PLMs have shown   to contain a great amount of real - world knowl-   edge ( Petroni et al . , 2019 ) , they might also be   used to extract meta - paths similar to expert cura-   tions . We sought to validate this hypothesis using   a widely - used HIN dataset NELL(Mitchell et al . ,   2018 ) . In particular , we randomly sampled 1000   2 - hop paths in NELL . For each path , we calcu-   lated a PLM - based similarity score , a name - based5111similarity score and a connectivity - based similarity   score . The PLM - based similarity score concate-   nated node names and edge type names along a   given path as a word sequence and then obtained   a probability for this sequence using GPT-2 . The   name - based similarity score calculated the textual   similarity between the node names of the starting   node and the end node using GPT-2 embeddings .   The connectivity - based similarity score is 1 if two   nodes are connected and 0 otherwise .   We first compared PLM - based similarity score   and name - based similarity score and observed a   substantial agreement of Spearman correlation 0.31   ( Fig . 1 a ) . This indicates that PLM is able to find   nodes with similar node names . Next , we found   that PLM - based similarity score is also highly pre-   dictive of the connectivity - based similarity score   ( Fig . 1 b ) , demonstrating the possibility to predict   missing links using a PLM . Collectively , the lan-   guage model probability of a path is predictive of   nodes similarity and connectivity , suggesting the   opportunity to find meta - paths using PLMs .   4 Methodology   The key idea of our approach is to form meta - path   identification as a text infilling problem ( Zhu et al . ,   2019 ) and then exploit PLMs to fill in the node   names and edge type names that best reflect the   graph information . These word sequences then   form paths on the HIN and are then aggregated   into meta - paths using a context - aware node type   classifier ( Fig . 2 ) .   4.1 Sampling paths through text infilling   To sample a path , we first sample two connected   nodes vandvfrom the HIN . For notation sim-   plicity , we denote vandvas the associated node   name on vandv . We then sample an l - hop path   fromvtovby using the following templates :   where [ MASK ] is the edge type name mask for the   i - th edge and [ MASK ] is the node name mask for   thei - th node . vandvguide the model to fill in   the edge type name for [ MASK ] and node name for   [ MASK ] . To fill in [ MASK ] , we initialize it with a   common edge type " relates to " and then update it   iteratively according to the nearby [ MASK ] .   We fill in [ MASK ] based on two intuitions . First ,   the node name that is filled in by the language   model is preferred to be an existing node in the   HIN . Second , the type of node ishould form a valid   path connecting [ MASK ] and [ MASK ] through   [ MASK ] and [ MASK ] . For example , for path   [ breast cancer][is treated by ] [ MASK ] , we need to   fill in a drug name rather than a disease name . For   the first intuition , we propose to fine - tune the PLM   using the HIN . For the second intuition , we pro-   pose to train a context - aware node type classifier   to predict the node type on - the - fly .   4.2 Fine - tuning the PLM using the HIN   We fine - tune the PLM using the HIN to increase the   probability that the infilled text is a valid node name   in the HIN . Let ebe an edge in the HIN . vandv   be the node names of the two nodes connected by   e , andrbe the edge type name of e. We construct   four templates as :   vrelates to [ MASK ] ,   [ MASK ] relates to v ,   vr[MASK ] ,   [ MASK ] r v.   The first two templates are edge - type - agnostic tem-   plates and the last two templates are edge - type-   specific templates .   We follow ( Donahue et al . , 2020 ) to use GPT-2   to infill this template . GPT-2 takes the concatenated   x[SEP ] yas input , where xis the masked template   andyis the target tokens . For each template , we   define xas the masked sentence templates and y   as the correct word tokens . All edges in the HIN5112are used to fine - tune the PLM . We decide to use   " relates to " in the first two templates in order to   make the model be compatible with the initializa-   tion using " relates to " in the previous path sampling   infilling .   4.3 Context - aware node type classifier   For the second intuition , we propose to train a   context - aware node type classifier . First , despite   fine - tuning the HIN using a PLM , the infilled node   name is still not guaranteed to be the name of an   existing node in the HIN . Second , even if the in-   filled node name is in the HIN , it might have an   ambiguous node type ( e.g. , apple as a fruit or a   company ) . Therefore , we need a node type classi-   fier to obtain its node type according to the nearby   edge type names and node names . To this end , we   train a GPT-2 - based classifier which can predict a   node type given the textual content .   Specifically , for node v , we calculate its node   feature embedding as :   h= GPT ( v ) . ( 1 )   LetEbe all the edges that connect v. Lete∈ E   connect vandv . Letabe the edge type of e. We   calculate a context feature embedding has :   h= GPT ( v[SEP ] a[SEP ] v ) . ( 2 )   A context - aware node type classifier is then trained   using handhas :   c= Softmax ( W(h||h ) + b ) ,   L=−/summationdisplay / summationdisplay / summationdisplaya[k ] logc[k],(3 )   where Wandbare trainable parameters . c   is a predicted vector of node types on node vac-   cording to edge e.ais the observed one - hot   vector of node types on node v. Kis the number   of node types . We fine - tune GPT-2 while training   this classifier .   To better fine - tune GPT-2 , we further introduce   a similar task of neighbour node type prediction ,   which predicts the node type of the neighbor v :   c= Softmax ( W(h||h ) + b ) ,   L=−/summationdisplay / summationdisplay / summationdisplaya[k ] logc[k],(4 )   where Wandbare trainable parameters . ais   the observed one - hot vector of node types on node   v. The final loss function is :   L = L+λL , ( 5 )   where λis a hyperparameter .   4.4 Meta - path induction   We can now sample many paths using text infill-   ing . Each time , we first sample a valid edge type   for [ MASK ] and [ MASK ] . Then we start the text   infilling from vtov . When a node name is filled   in , node type classifier is used to predict the node   type based on this node name , the previous node   name and the previous edge type name . This node   type is then used to guide the sampling for the next   edge type in order to maintain a valid path on the   path .   We sample paths of a variety of length . After   many paths are sampled , we will use the node type   classifier to convert each path to a meta - path . We   then rank all meta - paths by the frequency and select   the most frequent qpaths . For a fair comparison ,   we set qto the number of meta - paths that compari-   son approaches have generated in our experiments .   4.5 Meta - path - based predictions   After obtaining meta - paths , we can apply them   to meta - path - based graph embedding frameworks   ( Dong et al . , 2017 ; Wang et al . , 2019 ) . These frame-   works take a heterogeneous graph Gandqgener-   ated meta - paths as inputs , and then output an em-   bedding vector efor each node . The learned node   embeddings can be used for link prediction and   node classification .   Link prediction . To classify edges into edge   typer , the loss function is defined as :   where σ(·)is the sigmoid function , eis the   learned node embedding for node u , Eis the node   pairs with edge type r , Eis the set of negative   node pairs .   Node classification . The loss function for node   classification is the cross entropy loss :   z= Softmax ( We+b ) ,   L=−/summationdisplay / summationdisplayz[c ] logz[c],(7)5113where Vis the set of nodes that have labels , C   is the number of classes , eis the learned node   embedding for node v , zis the ground - truth label   vector and zis the predicted probability vector ,   andWandbare trainable parameters .   5 Results   5.1 Experimental setup   Datasets and tasks . We evaluated our method   on two text - rich HINs , HeteroGraphine and NELL   ( Mitchell et al . , 2018 ) . HeteroGraphine is a biomed-   ical HIN constructed based on expert - curated   biomedical ontology collection ( Liu et al . , 2021a ) .   We combined ontologies from five subdisciplines ,   including " uberon " , " pato " , " cteno " , " ceph " and   " ro " , and treated each subdiscipline as a node type .   There could be edges between the same node type   and between two different node types . Hetero-   Graphine consists of 17,317 nodes , 41,329 edges ,   5 node types and 118 edge types . NELL is a HIN   extracted from internet web text . We follow Wan   et al . ( 2020 ) to remove the triples with the relation   " generalizations " , which correspond to redundant   node type information . NELL consists of 77,455   nodes , 384,275 edges , 281 node types and 830   edge types . Given the large number of node types   and edge types in both datasets , manually curating   meta - paths is hard , necessitating automated meta-   path generation approaches .   We studied both link prediction and node classifi-   cation . For link prediction task , we chose to predict   edge type " develops from " in HeteroGraphine and   chose to predict " competes with " in NELL , follow-   ing previous work ( Wan et al . , 2020 ) . The ratio   of positive edges is 50 % . Since NELL does not   have node labels , we studied node classification on   HeteroGraphine only . We used the " subset " infor-   mation in each ontology as the label and evaluate   node classification on uberon and pato . Subset la-   bels can be regarded as the scientific field for each   node . uberon has 6 classes and pato has 7 classes .   Comparison approaches . We compared our   method with five meta - path generation methods .   Discrmetapath ( Shi and Weninger , 2014a ) is a   searching - based method , which prioritizes meta-   paths that can separate a path from its sibling paths .   GTN ( Yun et al . , 2019 ) and HGT ( Hu et al . , 2020 )   are attention - based methods . They do n’t explicitly   output meta - path , but meta - paths could be induced   from the combination of edge attention scores . Au-   toPath ( Yang et al . , 2018 ) and MPDRL ( Wan et al . ,2020 ) are reinforcement learning - based ( RL - based )   methods which train an agent to traverse on the   graph . Discrmetapath , MPDRL and Autopath did   not use textual information . We aim to assess the   importance of using textual information by com-   paring MetaFill to them . GTN and HGT explic-   itly considered the textual information by pooling   PLM - based word embeddings . We aim to examine   the effectiveness of text infilling against simple em-   bedding pooling by comparing MetaFill to them .   We further implemented a variant of our model   MetaFill w/o fine - tuning to investigate the impact   of fine - tuning the PLM using HIN . We did not re-   port the meta - path generation results of GTN on   both datasets because it can not generate any valid   meta - paths there , and did not report the results of   HGT on NELL because it can not scale to such a   schema - rich HIN .   Meta - path - based link prediction framework .   Our method and the comparison approaches can   automatically generate meta - paths . We then fed   these meta - paths to a meta - path - based HIN embed-   ding framework . We evaluated two widely - used   frameworks : Metapath2Vec ( Dong et al . , 2017 )   andHAN ( Wang et al . , 2019 ) . Each of them pro-   vides us the node embeddings , which are then used   for link prediction and node classification . Metap-   ath2Vec formalizes meta - path - based random walks   and then leverages a skip - gram model to optimize   node embeddings . HAN aggregates node features   from meta - path - based neighbors to get node em-   beddings .   Comparison approaches that do not use meta-   paths . We also compared to methods that do not   use meta - paths to demonstrate the importance of   meta - path . For link prediction , we compared our   method to heterogeneous graph neural network em-   bedding GTN ( Yun et al . , 2019 ) . For node classi-   fication , we compared our method to multi - layer   perceptron ( MLP ) , homogeneous graph neural net-   work embedding GraphSAGE ( Hamilton et al . ,   2017 ) , and heterogeneous graph neural network em-   bedding GTN . We used AUC andAPto evaluate   link prediction . We used micro - F1 andmacro - F1   to evaluate node classification . More implementa-   tion details can be found in Appendix A.2 .   5.2 Improved performance on link prediction   We summarized the performance on link prediction   inTable 1 . We found that our method obtained   the best results on both datasets under both meta-5114   path - based link prediction frameworks . For exam-   ple , MetaFill obtained at least 22 % AP improve-   ment against other meta - path generation methods   on HeteroGraphine under Metapath2Vec frame-   work . MetaFill also outperformed GTN by 22 %   AUC under HAN framework , indicating the im-   portance of using meta - paths to model HINs . Un-   der HAN framework , other meta - path generation   approaches are also better than GTN , again ne-   cessitating the generation and utilization of meta-   paths . We noticed that Metapath2Vec is in general   worse than HAN , partially due to HAN ’s explic-   itly aggregation of neighbor features . Importantly ,   HGT considering textual information performed   substantailly better than those do not consider tex-   tual information ( e.g. , Discrmetapath , AutoPath ,   MPDRL ) , confirming the benefits of incorporating   textual information into HIN modeling . Finally ,   we observed decreased performance by our vari-   ant , where the PLM is not fine - tuned using the   HIN , indicating how fine - tuning can ease the text   infilling procedure and later derive more accurate   meta - paths . Despite having a less superior per-   formance , this variant is still better than all other   comparison approaches on both datasets , reassur-   ing the effectiveness of using text infilling to find   meta - paths .   5.3 Improved performance on node   classification   We next investigated the performance of our   method on node classification . Since all of the   meta - path generation comparison approaches ex-   cept HGT are designed for link prediction task , weonly compared to HGT and two other non - meta-   path - based approaches GraphSAGE and GTN . We   found that our method achieved the best perfor-   mance under both the framework of Metapath2Vec   and HAN ( Table . 2 ) . For example , the micro - F1   and macro - F1 of our model are 6.7 % and 6.3 %   higher than HGT on pato under HAN framework .   The performance of HAN is also in general better   than non - meta - path - based approaches , especially   on macro - F1 , again demonstrating the effectiveness   of meta - paths on HIN embedding . The superior   performance of MetaFill on both link prediction   and node classification collectively proves the effec-   tiveness of using text filling to generate meta - paths .   5.4 Connectivity in HIN improves PLMs   We further visualized the embedding space of GPT-   2 before and after fine - tuning to understand the   superior performance of our method on node clas-   sification ( Fig . 3 ) . We observed that the quality of   GPT-2 embedding improved substantially after fine-   tuning on the HIN . In particular , we calculated the   word embeddings of node names for nodes whose   type is among " website " , " clothing " and " disease " .   GPT-2 without fine - tuning did n’t show a visible   pattern for these nodes . In contrast , both GPT-2   fine - tuned using HIN and GPT-2 fine - tuned using   context - aware node type classifier presented a clear   pattern for these three node types . In summary ,   the HIN provides valuable information about the   node names and node types for the language model   during the fine - tuning . While PLMs facilitate the   HIN embedding , the rich connectivity information   in the HIN also improves the word embedding of   PLMs .   5.5 Consistent improvement using fewer   training data   We next investigated the performance of our   method and comparison approaches using fewer   training data . On both datasets , we randomly sam-   pled 25%/50%/75 % of node pairs in the original   training data , and then used them to find meta - paths .   We first noticed that the performance of comparison   approaches dropped substantially when there are   fewer training data points , indicating that they re-   quire enough training data to derive accurate meta-   paths Fig . 4 . In contrast , our method demonstrated   a stable performance when fewer training data was   provided . We attributed this superior performance   to MetaFill ’s ability to exploit the rich textual infor-5115   mation from the HIN , again confirming the impor-   tance of using text infilling to identify meta - paths .   5.6 Zero - shot link prediction   Our method is also able to perform link predic-   tion in the zero - shot setting . Here , we aim to clas-   sify edges into the edge type " develops from " . To   study the zero - shot setting , we held - out all edges   belong to this edge type in the training data . To do   the link prediction , we first fed " [ MASK ] develops   from [ MASK ] " into the fine - tuned GPT-2 to generate   many pseudo training node pairs . These pairs are   then used by MetaFill to generate meta - paths . We   observed a desirable performance on both Meta-   path2Vec ( AUC=0.6567 , AP=0.7068 ) and HAN   ( AUC=0.7733 , AP=0.8024 ) ( Fig . 4 c ) . Notably ,   these results are only slightly worse than the su-   pervised learning setting ( Fig . 4 ) , highlighting the   strong applicability of our method .   5.7 A case study of the generated meta - paths   Finally , we presented a case study for the link   prediction task on HeteroGraphine to examine   the meta - paths generated by MetaFill . For a test   edge ( ceratobranchial 5 tooth , develops from , tooth   enamel organ ) , our model generated the followingmeta - path : .   This meta - path helps the meta - path - based frame-   work found the following path :   which enables us to correctly predict this edge .   None of the comparison approaches identify this   meta - path . Thus , they can not correctly predict this   edge . uberon represents biological structures in   anatomy . This meta - path conforms the domain   knowledge that a biological structure vis more   likely to develop from another structure vif its   parent node has developmental contribution from   v , indicating the consistency between the meta-   paths generated by our model and those curated by   domain experts .   6 Related Work   Automatic meta - path selection and identification   are emerging research problems due to their impor-   tance in modeling HIN . Searching - based methods   enumerate all the meta - paths ( Wang et al . , 2018;5116   Deng et al . , 2021 ; Wei et al . , 2018 ) or expand   meta - paths iteratively with searching algorithm   such as greedy tree ( Meng et al . , 2015 ; Cao et al . ,   2016 ; Zheng et al . , 2017 ) , k - shortest path ( Shi and   Weninger , 2014b ) and A * ( Zhu et al . , 2018 ) , and   rank them by some pre - defined metrics . Reinforce-   ment learning - based methods train an agent to walk   on the graph and induce meta - paths from the tra-   jectories ( Ning et al . , 2021 ; Wan et al . , 2020 ; Yang   et al . , 2018 ; Zhong et al . , 2020 ) . Attention -based   methods use the attention score of edges ( Yun et al . ,   2019 ; Hu et al . , 2020 ; Wang et al . , 2020b ) or meta-   paths ( Li et al . , 2021 ; Hu et al . , 2018 ; Zhang and   Zhu , 2021 ; Liang and Liu , 2020 ) in GNN with at-   tention mechanism to evaluate the importance of   meta - paths . Compared to searching - based methods ,   our approach can leverage not only the graph struc-   ture but also the textual information . In contrast   to RL - based methods and attention - based methods ,   our approach avoid the information loss caused by   pooling the textual content into a node embedding   vector , and more effectively utilize the knowledge   in PLMs .   Language models have been used to build and   complement knowledge bases ( AlKhamissi et al . ,   2022 ) . Previous works extract knowledge from   PLMs for fact probing ( Petroni et al . , 2019 ; Davi-   son et al . , 2019 ; Jiang et al . , 2020b , a ; Adolphs et al . ,   2021 ; Zhong et al . , 2021 ; Qin and Eisner , 2021 ;   Kassner et al . , 2021 ; Shin et al . , 2020 ; Dhingra   et al . , 2021 ; Liu et al . , 2021b ; Sung et al . , 2021 ) , se-   mantic probing ( Gao et al . , 2021 ; Shin et al . , 2020 ;   Beloucif and Biemann , 2021 ) , reasoning ( Talmor   et al . , 2020 ; Gao et al . , 2022 ) , planning ( Huang   et al . , 2022 ) and knowledge graph construction   ( Yao et al . , 2019 ; Wang et al . , 2020a ) . The key dif - ference between our work and these studies is that   we aim at finding meta - paths rather than a specific   path or edge in the knowledge graph . Aggregat-   ing paths into meta - paths is non - trivial due to the   potential invalid paths and ambiguous node types .   Our ablation study that showed the importance of   fine - tuning PLMs using HIN also confirmed this .   To the best of our knowledge , our work is the first   application of language models for meta - path gen-   eration .   7 Conclusion and Future Work   In this paper , we have proposed a novel text-   infilling - based meta - path generation method . The   key idea of our method is to form meta - path gener-   ation as a text infilling problem and sample impor-   tant paths from a HIN by using PLMs to generate   sequences of node names and edge type names . We   have evaluated our method on two datasets under   two meta - path - based HIN embedding frameworks ,   and obtained the best performance on node clas-   sification and link prediction . The improvement   of our method is also consistent in low - resource   settings . In addition , we found that fine - tuning the   PLM using a HIN can further improve word em-   beddings , again indicating how our method creates   an synergistic effort between HINs and PLMs .   To the best of our knowledge , our method is the   first attempt to apply PLMs to meta - path genera-   tion . Since PLMs are constructed on large - scale   real - word text corpus , they often contain rich real-   world knowledge . We envision that our method   will motivate future research in investigating how   PLMs can be used to advance other graph analysis   problems.5117Acknowledgement   This paper is partially supported by National Key   Research and Development Program of China with   Grant No . 2018AAA0101902 and the National   Natural Science Foundation of China ( NSFC Grant   Numbers 62106008 and 62276002 ) .   Limitations   We currently have identified three limitations for   our paper . First , the edge type names and node   names are generated greedily for computational   efficiency , introducing accumulative errors . We   plan to implement beam search to alleviate this   problem in the future . Second , we only generate   meta - paths to connect positive connected pairs but   overlook the difference between positive and nega-   tive pairs . We plan to exploit contrastive learning   techniques to maximize the probability of meta-   paths that connect positive pairs , while minimizing   the probability of meta - paths that connect negative   pairs . Finally , our method has currently only been   applied to link prediction and node classification .   It is also important to evaluate other graph - based   tasks such as node clustering , graph - to - text genera-   tion , to thoroughly evaluate our method .   References511851195120   A Appendix   A.1 Name - based Score for Hypothesis   Validation   For a path we calculate the text similarity between   its head node vand tail node v :   sim(v , v ) = 1   1 + ||e−e||   where eandeare the GPT-2 embeddings of the   head node name and tail node name , || · || is the   Euclidean distance . A.2 Implementation Details   Metapath2Vec and HAN For Metapath2vec , the   walk length is 1 on HeteroGraphine and 10 on   NELL . For HAN , we use bag - of - words vector as   the initialization of node embeddings . The dimen-   sion of node embeddings are both set to 128 for fair   comparison and the learning rates are both 0.001 .   We follow the other hyperparameter settings in the   orginal papers .   Link prediction and node classification We   use dot product score to do link prediction after   getting node embeddings . For node classification ,   we train HAN with the cross entropy loss function   end - to - end . Since Metapath2Vec can not do node   classification directly , we train a 1 - layer MLP clas-   sifier on top of the node embedding vectors . 12.5 %   of the training data are randomly sampled as the   validation set for early stopping .   Our meta - path generation method We follow   the settings in ( Donahue et al . , 2020 ) to fine - tune   the GPT-2 for text - infilling , and fine - tune based on   their fine - tuned model . The context - aware node   type classifier is trained using early stopping and   the training data and validation data are 4:1 , λis   set to 1 . We sample paths from 1 - hop to 4 - hop .   Note that for 1 - hop paths , no node name needs to   be infilled , we only randomly sample an edge to   connect vtov . We run the generation process   of each node pair 10 times since there could be   more than one paths connecting two nodes . To re-   duce the computaional cost , we sample connected   nodes from a subset of the large - scale HIN . For link   prediction task , the subset is the training positive   edges . For node classification task , the subset is   nodes with similar labels ( The label similarity is   calculated by the cosine similarity of the muti - hot   label vector ) . For link prediction task , we select   top-8 meta - paths for HeteroGraphine and top-23   meta - paths for NELL on all the competing methods   for a fair comparison . For node classification task ,   we select top-6 meta - paths . All experiments are   carried out on NVIDIA GeForce RTX 3090 . We   use 2 GPUs for finetuning and 1 GPU for infilling .   The finetuning stage need 1 day and the infilling   stage can be finished within 2 hours .   Baselines ForGTN , we set the number of layers   to 3 for link prediction task and set the layers for   node classification task to 2 , in order to adapt to   the scale of the dataset . The learning rates for these   two tasks are 5e-4 and 5e-6 . All the other hyper   parameters are same with the original official code.5121ForHGT , in link prediction task , we set the layers   of HGT to 4 and the depth and width of sampling to   6 and 128 respectively . The batch size is set to 256 .   As to node classification task , we set the layers of   HGT to 3 and the depth and width of sampling to   3 and 64 . The batch size for node classification is   64 . The choices of these parameters are also for the   scale of datasets . The corresponding learning rate   for these two tasks are 1e-3 and 1e-6 . AutoPath   andMPDRL are only used in the link prediction   task . We just follow the official implementations   without changing of hyperparameters . MLP use   Bag of Words of nodes ’ names as the features for   nodes to do node classification . We use three layers   of MLP and use Tanh as the activation function . We   set learning rate to 1e-3 . For GraphSAGE , we also   follow the official implementation . We set learning   rate to 1e-1.5122