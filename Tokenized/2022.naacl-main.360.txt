  Ran Zmigrod Tim Vieira Ryan CotterellUniversity of Cambridge Johns Hopkins University ETH Zürich   rz279@cam.ac.uk tim.f.vieira@gmail.com   ryan.cotterell@inf.ethz.ch   Abstract   Significance testing — especially the paired-   permutation test — has played a vital role in   developing NLP systems to provide confidence   that the difference in performance between two   systems ( i.e. , the test statistic ) is not due to   luck . However , practitioners rely on Monte   Carlo approximation to perform this test due   to a lack of a suitable exact algorithm . In this   paper , we provide an efficient exact algorithm   for the paired - permutation test for a family   of structured test statistics . Our algorithm   runs in O(GN(logGN)(log N))time where   Nis the dataset size and Gis the range of   the test statistic . We found that our exact   algorithm was 10x faster than the Monte   Carlo approximation with 20000 samples on a   common dataset.https://github.com/rycolab/   paired - perm - test   1 Introduction   How confident can we be that System Uis more   accurate than System V ? Questions of this form   are widespread in natural language processing ( Di-   etterich , 1998 ; Koehn , 2004 ; Ojala and Garriga ,   2010 ; Clark et al . , 2011 ; Berg - Kirkpatrick et al . ,   2012 ; Dror et al . , 2018 ) and statistical hypothe-   sis testing provides answers ( Lehmann and Ro-   mano , 2005 ) . In this paper , we study the paired-   permutation test ( Good , 2000)—a commonly used   hypothesis test in NLP because it makes no as-   sumptions on the distribution of the data or the   evaluation metric used to compare the two sys-   tems ( Yeh , 2000 ; Dror et al . , 2018 , 2020 ; Deutsch   et al . , 2021 ) . The paired - permutation test checks   whether a test statistic is significant by evaluating   the probability that a value at least as large as the   observed statistic would occur if system outputs   were randomly swapped . Thus , an exact algorithm   for evaluating the paired - permutation test involves   a summation over all 2possible swaps . WithoutFigure 1 : Runtime comparison of exact_perm_test   using convolve_DP and convolve_FFT , and   monte_carlo as a function of the number of en-   tries in the dataset . See for § 5 for experimental details .   any assumptions on the test statistic , we can only   exactly compute this sum in O(2)time . Thus ,   practitioners often resort to running a Monte Carlo   ( MC ) approximation which replaces the summa-   tion with K≪2randomly sampled swaps . Al-   though the MC approximation is often practical ,   it unfortunately , introduces additional error when   determining the significance of a test ( Serlin , 2000 ;   Koehler et al . , 2009 ) .   This paper proposes a family of additively struc-   tured , integer - valued test statistics . Test statistics   of this form admit an efficient exact algorithm   that leverages the fast Fourier transform ( Cooley   and Tukey , 1965 ; Cormen et al . , 2022 ) to run   inO(GN(logGN)(log N))time where Nis the   size of the dataset and Gis the range of the test   statistic . We compare the efficiency of our exact   method to the MC approximation for comparing   part - of - speech taggers on the Universal Depen-   dency Dataset ( Nivre et al . , 2018 ) . Surprisingly ,   ourexact algorithm is faster than MC approxima-   tion : given 10000 sentences , our algorithm is 10x   faster than MC with 20000 samples and 3x faster   than MC with 5000 samples , taking ≈0.1 seconds.48942 Paired - Permutation Testing   Thepaired - permutation test ( Good , 2000 ) , the   focus of this work , is a common null hypothesis   significance test that has a natural application to   many problems in NLP ( Peyrard et al . , 2021 ) . The   test attempts to reject the null hypothesis , described   below , at significance level α ; typically α= 0.05 .   Preliminaries . Suppose we want to compare the   performances of two systems UandVwhere each   system was evaluated on a dataset of the same N   entries . We place the entries of UandVinto a   pair of arrays of length Ndenoted uandv .   The null hypothesis . The goal of a paired-   permutation test is to test whether the entries u   andvareindependent of the labels UandV   themselves . The reason that this is the question   we ought to care about is that , fundamentally , if   the system label ( in this case , UorV ) provides no   information ( in the sense of mutual information )   about the entry , then we should notprefer one sys-   tem to another . And , from basic information theory ,   we know that two random variables ( RVs ) have   no mutual information iff they are independent .   So , independence of the system ’s label and the   system ’s set of entries is the right thing to inquire   about . In the language of frequentist testing , the   hypothesis that a system ’s labels and individual   entries are independent is known as the null hy-   pothesis . And , under a paired - permutation test , the   goal is to ascertain whether the data ( the observed   entries uandv)provide enough evidence to reject   the null hypothesis , i.e. , to conclude that the label   of a system shares information with the quality of   its individual entries , and are indeed dependent .   The null distribution . Next , in order to attempt   to reject the null hypothesis , we require a distri-   bution over ( hypothetical ) pairs of entries uand   vwhose individual entries are independent of the   system labels UandV , which is achieved through   the construction of RVs UandV , whose joint   distribution can be used to sample our hypothetical   uandv . Traditionally , P[U , V]is referred   to as the null distribution . A paired - permutation   test provides a simple recipe for constructing such   an RV pair . The first step is to make an entry - wise   independence assumption : we define the joint   probability P[U , V]=/producttextP[U , V ] . This   means that the prediction a system makes for the   nentry is independent of the mentry whenn̸=m . In the second step , we further define the   entry - wise joint distribution as   P / bracketleftbig   U = u , V = v / bracketrightbig=1   2(stay ) ( 1a )   P / bracketleftbig   U = v , V = u / bracketrightbig=1   2(swap ) ( 1b )   In words , P[U , V]is a uniform distribution   over swapping UandV ’s prediction for the n   entry . All in all , this definition of P[U , V]as   the null distribution gives us a uniform distribution   over all 2ways swapping of the labels and the   individual entries of the observed predictions u   andv . And , importantly , the joint distribution   P[U , V ] , encodes the fact that the sampled   entries are independent of the system label .   The test statistic and the p - value . The final   ingredient we need in a null hypothesis test is a test   statistic , whose job it is to provide a summary of   samples ( u , v)∼P[U , V]and thereby facil-   itate comparison of samples from the null distribu-   tionP[U , V]and the observed entries ( u , v ) . In   this work , we will define a test statistic as function   t(u , v ) . In principle , we can choose anytest statis-   tictthat allows us to distinguish uandv , i.e. , we   have have t(u , v ) = 0 ⇐ ⇒ u = v. Now , given   observed entries uandv , thep - value is defined as   p = P / bracketleftbig   t(U , V)≥ξ / bracketrightbig   ( 2 )   where ξ = t(u , v)is the observed effect . In   words , the p - value is the probability of observing   a test statistic t(u , v)with a value as large as   t(u , v)where ( u , v)∼P[U , V]are sampled   from the null distribution . Recall that the system   labels and entries are independent under the null   distribution by construction , so the p - value tells   us , under the independence assumption , how   likely such a large test statistic would have been   observed . The test says that we have sufficient   evidence to reject the null hypothesis when p < α .   These concepts are depicted in Fig . 2.tp=/summationtext48953 Structured Test Statistics   We now discuss a common special case of the   paired - permutation test where the test statistic has a   particular structure . In § 4 , we show how to exploit   this structure to develop an efficient algorithm to   exactly compute the test . The specific assumption   we make is that the test statistic is an integer - valued   additively decomposable function . Formally , this   assumption means that we can rewrite tas follows   t(u , v)=h(g(u , v ) ) ( 3 )   for any function hand additively decomposable   function g(u , v)=/summationtextg(u , v)such that   gis an integer - valued function with a range   of size O(G ) . The structure of ( 3 ) will allow   us to derive an efficient algorithm for evaluat-   ingP[t(U , V ) ] = P / bracketleftig   h / parenleftig / summationtextg(u , v)/parenrightig / bracketrightig   .   We now dissect this equation . Each sum-   mand g(u , v)can take on one of two values− →ξ = g(u , v)and← −ξ = g(v , u)with equal   probability . We rewrite the sum / summationtextg(u , v )   asS=/summationtextZwhere Zare uniform RVs over   the set { − →ξ,← −ξ } . Each Zhas probability mass   function ( PMF )   f(z)= pmf(− →ξ,← −ξ)(z ) ( 4a)=      1 / bracketleftig   z∈ { − →ξ,← −ξ}/bracketrightig   if− →ξ̸=← −ξ   1 / bracketleftig   z=− →ξ / bracketrightig   otherwise(4b )   The domain of each PMF , dom ( f ) , contains at   most two elements . Let S= dom(S ) . Clearly ,   |S|=O(GN)as we have a sum over NRVs   Zeach with domain size O(G ) . The following   theorem shows that we can evaluate P[t(U , V ) ]   from the distribution of S , which we we will show   in the next section is efficient to compute .   Theorem 1 . For any test statistic tthat factorizes   as in ( 3)withhandg , the distribution of the test   statistic under the null distribution decomposes as   P / bracketleftbig   t(U , V)/bracketrightbig   = P[h(S ) ] ( 5 )   Proof .   P / bracketleftbig   t(U , V)/bracketrightbig   = P / bracketleftigg   h / parenleftigg / summationdisplayg(U , V)/parenrightigg / bracketrightigg   ( 6a )   = P / bracketleftigg   h / parenleftigg / summationdisplayZ / parenrightigg / bracketrightigg   ( 6b )   = P[h(S ) ] ( 6c )   ■ defmonte_carlo ( u , v , g , h , K ): forn= 1toN:− →ξ←g(u , v ) ▷← −ξ←g(v , u ) ▷ f←pmf / parenleftig− →ξ,← −ξ / parenrightigξ←h / parenleftigg / summationdisplay− →ξ / parenrightigg   ▷▷z∼fforn= 1toN , k = 1toK return1   K / summationdisplay1 / bracketleftigg   h / parenleftigg / summationdisplayz / parenrightigg   ≥ξ / bracketrightigg   Example . A common test statistic is the dif-   ference in accuracy , in which each entry u∈   { 1 , ... , C}where Cis the number of classes and   in this case , Gis the maximum length of an en-   try sequence ( or one if each entry has a binary   accuracy value ) . Then g(u , v)∈ { − G , ... , G } is   the difference in the number of correct predictions   between individual entries uandv . We can ad-   ditionally define the function has either h(x ) = x   orh(x ) = |x|depending on whether we want a   one - tailed or two - tailed significance test .   A Monte Carlo paired - permutation test . To the   best of our knowledge , no practical exact algorithm   for the paired - permutation test has been given in the   literature . Thus , most practical implementations of   the paired - permutation test use an MC approxima-   tion , whereby one randomly samples from Sto ap-   proximate P[U , V ] . We give this MC algorithm   asmonte_carlo in Alg 1 which runs in O(KN )   time where Kis the number of samples taken .   4 An Exact Paired - Permutation Test   In this section , we describe two exact , efficient algo-   rithms for computing the p - value under the paired-   permutation test for any structured test statistic ( see   ( 3)).Our algorithms hinge on an important theo-   rem in probability : The PMF of the sum of indepen-   dent events is the convolution of their individual   PMFs ( Ross , 2008 , p. 252 ) . Let fdenote the PMF4896defexact_perm_test ( u , v , g , h ): forn= 1toN:− →ξ←g(u , v ) ▷← −ξ←g(v , u ) ▷ f←pmf / parenleftig− →ξ,← −ξ / parenrightigξ←h / parenleftigg / summationdisplay− →ξ / parenrightigg   ▷f←f⋆···⋆ f ▷▷ return / summationdisplayf(ξ ) 1 / bracketleftbig   h(ξ)≥ξ / bracketrightbig   ofS. Since RVs Zare independent , we have that   P / bracketleftbig   h(S)≥ξ / bracketrightbig   ( 7a )   = /summationdisplayf(ξ ) 1 / bracketleftbig   h(ξ))≥ξ / bracketrightbig   ( 7b )   = /summationdisplay(f⋆···⋆ f)(ξ ) 1 / bracketleftbig   h(ξ))≥ξ / bracketrightbig   ( 7c )   where ⋆is the discrete convolution operator . For   functions f , f∈ S → R , f⋆ f∈ S → Ris   given by the following expression   ( f⋆ f)(ξ)=/summationdisplayf(ξ)f(ξ−ξ ) ( 8)   Pseudocode for this algorithm is given as   exact_perm_test in Alg 2 . We omit the details   of evaluating the convolution in exact_perm_test   and discuss methods for efficient convolution in the   remainder of this section .   Theorem 2 . For any two entries , uandv , and   test statistic tthat factorizes as in ( 3)with h   andg , exact_perm_test ( u , v , g , h)returns pin   O(GN+r(G , N ) ) time , O(N+s(G , N ) ) space .   We define r(G , N ) ands(G , N ) as the time and   space complexities for constructing f⋆···⋆ f.   Proof . The correctness of exact_perm_test is by   Theorem 1 and ( 7c ) . All lines except for Line 7   and Line 9 require at most O(N)time and space .   Line 9 runs in O(GN)time and O(1)space . Thus ,   exact_perm_test runs in O(N+GN+r(G , N ) )   time and O(N+s(G , N ) ) space . ■   The computational question is then : What   is the most efficient algorithm for evaluat-   ing(f⋆···⋆ f)(ξ ) ? In the following twodefconvolve_DP ( f , ... , f ): F←0 F(0)←1 ▷ forn= 1toN : ▷ forξ∈dom ( f ): ▷ forξ∈dom(F ): F(ξ+ξ)+=f(ξ)·F(ξ ) return F   subsections , we present O(GN)time and   O(GN(logGN)(log N))time algorithms for per-   forming this N - fold convolution .   4.1 Convolution by Dynamic Programming   Our first approach builds a dynamic program ( DP )   that takes advantage of the sparsity of our RVs   to efficiently construct the PMF f. We do this   by constructing a PMF array F∈Rforn∈   { 0 , ... , N}(we use n= 0as an initialisation base   case ) such that F(ξ ) = ( f⋆···⋆ f)(ξ ) . As we   apply each convolution , we know that fis only   non - zero at− →ξand← −ξ , and so we can run each   convolution in O(GN)time . The pseudocode for   this approach is given as convolve_DP in Alg 3 .   Theorem 3 . For any RVs Z , ... , Zwith   PMFs f , ... , f , convolve_DP ( f , ... , f)returns   f⋆···⋆ finO(GN)time , O(GN)space .   Proof . The proof of correctness of convolve_DP   is given in App . A. Each FhasO(GN)elements   and so convolve_DP clearly runs in O(GN)time .   Furthermore , at any iteration , we only require F   andFand so we can execute convolve_DP in   O(GN)space . ■   4.2 Convolution by FFT   Our second approach uses the fast Fourier trans-   form ( FFT ; Cooley and Tukey , 1965 ; Cormen   et al . , 2022 ) to evaluate the convolutions . Us-   ing this method means that each convolution takes   O(GNlogGN)timeO(GN)space . We further   exploit the commutativity of convolution to per-   form the N - fold convolution in logNconvolutions   using a recursive program . The pseudocode for this   approach is given as convolve_FFT in Alg 4.4897defconvolve_FFT ( f , ... , f ): ifN= 1 : return f return convolve_FFT ( f , ... , f )   ⋆convolve_FFT ( f , ... , f )   Theorem 4 . For any RVs Z , ... , Zwith PMFs   f , ... , f , convolve_FFT ( f , ... , f)returns   f⋆···⋆ finO(GN(logGN)(log N))time ,   O(GNlogN)space .   Proof . The correctness of convolve_FFT is due   to Cooley and Tukey ( 1965 ) . The recursion of   convolve_FFT can be given as   T(N ) = 2 T / parenleftbiggN   2 / parenrightbigg   + O(GNlogGN ) ( 9 )   Solving this recursion , we call TO(logN)times .   Therefore , the time complexity of convolve_FFT   isO(GN(logGN)(log N ) ) . Similarly , each call   requires O(GN)space and convolve_FFT has a   space complexity of O(GNlogN ) . ■   Corollary 1 . For any two entries , uandv , and   test statistic tthat factorizes as in ( 3)with h   andg , exact_perm_test ( u , v , g , h)returns pin   O(GN(logGN)(log N))time , O(GN)space .   Proof . The correctness and complexity bounds are   due to Theorem 2 and Theorem 4 . Specifically ,   Line 7 can be executed using convolve_FFT . ■   5 Experiments   We demonstrate the efficiency of our exact algo-   rithms by simulating paired - permutation tests be-   tween the accuracy of two systems . In order to have   some control over the p - value , N , and G(maxi-   mum length of a sentence ) , we randomly generate   our two system outputs from a measured distri-   bution . Specifically , we will use the Stanza(Qi   et al . , 2020 ) part - of - speech tag accuracy statistics   when evaluating on the English Universal Depen-   dencies ( UD ) test set ( Nivre et al . , 2018 ) . We sam-   ple our outputs from the normal distribution where   the mean and standard deviation match the ratesMetric Mean Standard Dev .   Accuracy 0.9543 0 .1116   Sentence length 12.08 10 .60   of Stanza ’s observed accuracy . We further sample   the length of each sample sentence according to   the distribution of lengths in the test set . These   distributions are provided in Tab . 1 .   We show that , empirically , the exact test   ismore efficient than the MC approximation ;   this is evinced in Fig . 1 where we have   compared the runtime of exact_perm_test us-   ing convolve_DP and convolve_FFT against   monte_carlo for various sample sizes ( K∈   { 5000,10000 , 20000 , 40000}).We note that us-   ingconvolve_DP is already more efficient than   running monte_carlo with K= 40000 and   K= 20000 ( up to N≈8000 ) .Further-   more , convolve_FFT ismuch faster and we ob-   serve a speed - up between 3x and 30x , depend-   ing on the number of samples K. Indeed , us-   ingconvolve_FFT allows us to perform an exact   paired - permutation test for N= 10000 in approxi-   mately one - tenth of a second .   6 Conclusion   We presented an algorithm to compute the ex-   actp - value of a paired - permutation test for the   case of a family of structured test statistics , in-   cluding the difference in accuracy . Our algo-   rithm runs in O(GN(logGN)(log N))time and   requires O(GN)space . We empirically show that   our exact algorithm is faster than Monte Carlo ap-   proximation techniques . The theory of our work is   extensible to a more general class of test statistics   which we discuss in App . B. We hope that this work   encourages the use of exact paired - permutation   tests in future NLP research .   Ethical Concerns   We foresee no ethical concerns in this work.4898Acknowledgments   We would like to thank the reviewers for their in-   valuable feedback and time spent engaging with   our work . The first author is supported by the   University of Cambridge School of Technology   Vice - Chancellor ’s Scholarship as well as by the   University of Cambridge Department of Computer   Science and Technology ’s EPSRC .   References48994900A Proof of Correctness of convolve_DP   We prove the correctness of convolve_DP using the following lemma .   Lemma 1 . For any NRVs Z , ... , Zwith PMFs f , ... , frespectively and n∈ { 1 , ... , N } ,   convolve_DP ( f , ... , f)constructs Fsuch that for any ξ∈ S ,   F(ξ ) = f(ξ)= ( f⋆···⋆ f)(ξ ) ( 10 )   Proof . We prove this by induction on N.   Base case : N= 1 . We have that F(0 ) = 1 andF(ξ ) = 0 for all ξ∈ S∖{0 } . Therefore ,   F(− →ξ ) = F(← −ξ ) = andF(ξ ) = 0 for all ξ∈ S∖{− →ξ,← −ξ}as expected .   Inductive step : Assume ( 10 ) holds for N = n−1 . LetN = nand consider f⋆ f.   ( f⋆ f)(ξ ) = /summationdisplayf(ξ)f(ξ−ξ ) = /summationdisplayf(ξ+ξ)f(ξ ) = /summationdisplayF(ξ+ξ)f(ξ)(11 )   This is exactly the construction in the for - loop between Line 7 and Line 8 . Therefore , F(ξ ) = f(ξ ) . ■   AsFwill contain the N - fold convolution f⋆···⋆ f , convolve_DP is correct by definition .   B Paired - Permutation Test for Higher - order Test Statistics   In this section , we extend our approach for the paired - permutation test to test statistics that are functions   ofmadditively decomposable functions . In symbols , this assumption means that we can rewrite tas   follows   t(u , v)=h(g(u , v ) , ... , g(u , v ) ) ( 12 )   for any function hand integer - valued , additive decomposable functions g(i.e . , g(u , v)=/summationtextg(u , v ) . We now define− →ξand← −ξasm - tuples ,   − →ξ=⟨g(u , v ) , ... , g(u , v)⟩ ( 13 )   ← −ξ=⟨g(v , u ) , ... , g(v , u)⟩ ( 14 )   And so each RV Zhas the same PMF as in ( 4b ) . We can then define an analogous function to   exact_perm_test for the case of madditively decomposable functions . We give pseudocode for this as   exact_perm_testin Alg 5 . The convolution algorithms , convolve_DP andconvolve_FFT , can both be   used to perform for convolution step in Line 7 .   Theorem 5 . For any two entries , uandv , and test statistic tthat factorizes as in ( 12 ) withhand   gtog , exact_perm_test(u , v , g , ... , g , h)returns pinO(GN(logGN)(log N))time and   O(GNlogN)space .   Proof . The proof of correctness for exact_perm_testis the same as Theorem 2 . The expensive   operation in the algorithm is the convolution step ( Line 7 ) . We can perform a FFT m - dimensional   convolution in O(GNlogGN)time and O(GN)space . As we require O(logN)convolution   steps , exact_perm_testruns in O(GN(logGN)(log N))time and O(GNlogN)space . ■   Example . A common example for a test statistic that requires multiple additively decomposable func-   tions is the difference in Fscores . Similar to accuracy , each entry u∈ { 1 , ... , C}andGis the   maximum length of an entry sequence . Let tp(u)andin(u)be the number of true positive and incorrect   predictions made in entry urespectively . Then the difference in Fscores can be given as   t(u , v)=/summationtexttp(u)/summationtexttp(u ) + /summationtextin(u)−/summationtexttp(v)/summationtexttp(v ) + /summationtextin(v)(15)4901defexact_perm_test(u , v , g , ... , g , h ): forn= 1toN:− →ξ←⟨g(u , v ) , ... , g(u , v)⟩ ▷← −ξ←⟨g(v , u ) , ... , g(v , u)⟩ ▷ f←pmf / parenleftig− →ξ,← −ξ / parenrightigξ←h(g(u , v ) , ... , g(u , v ) ) ▷f←f⋆···⋆ f ▷▷ return / summationdisplayf(ξ ) 1 / bracketleftbig   h(ξ)≥ξ / bracketrightbig   We can therefore use four - additively decomposable functions , gtog , that decompose such that   g(u , v ) = g(v , u ) = tp ( u)andg(u , v ) = g(v , u ) = in ( u ) . Our hfunction then takes   four arguments and can be defined as   h(x , x , x , x)=x   x+x−x   x+x(16 )   We can additionally apply an absolute value to hto check for the absolute difference in Fscores ; doing   this would make the significance test two - tailed rather than one - tailed.4902